14.10 认识接口测试
1. 手工测试和接口测试的简略结构是怎样的？
2. 接口测试的目标是什么？
3. UI 和 GUI 是什么？有什么区别？
4. 封包和解包的过程是怎样的？
5. 图形界面测试和接口测试的测试对象有什么不同？
6. 什么是 Mock？
---------------------------------------------------------------------------
14.20 网络协议
1. 网络协议是什么?
2. 协议的核心是什么?
3. 什么是协议?
---------------------------------------------------------------------------
14.30 网络分层和数据
1. 为什么网络是要分层的?
2. 网络分层方法有哪些?
3. 分层和接口测试的关系?
4. 更广义的接口测试是什么?
---------------------------------------------------------------------------
14.40 应用层和http协议
1. 应用层是用来干嘛的? 有哪些常见的协议?
2. 应用层的网络应用程序是怎样工作的?
3. HTTP 协议里是怎样封报文和解报文的?
4. HTTP 协议里请求和响应的格式分别是什么?
5. 301, 400, 404, 500 分别代表什么含义?
---------------------------------------------------------------------------
14.50 其他层次和协议
1. 还有哪些其他层次? 有哪些主要协议?
2. 还有其他哪些协议? 他们之间的区别是什么?
3. 这么多协议要怎么在接口测试的脚本中处理?
---------------------------------------------------------------------------
14.80 requests 中的响应
1. 

---------------------------------------------------------------------------
14.90 requests 中的会话
1. cookie和session的定义？以及他们的区别
2. 如果响应中含有cookies，如何读取？给出示例代码
3. 如果想在请求中添加cookies，如何操作？ url=http://httpbin.org/cookies
4. 如何把RequestCookieJar 添加到请求中？ 给出示例代码 url=http://httpbin.org/cookies
5. 如何在requests中使用会话？给出示例代码？ 也就是如何证明session的功能？
   就是可以在不同请求中确认服务器记住了我们的cookie
   设置cookie：http://httpbin.org/cookies/set/{name}/{value} (GET 请求)
   查看当前请求携带的cookie：http://httpbin.org/cookies (GET 请求)
---------------------------------------------------------------------------
---------------------------------------------------------------------------
---------------------------------------------------------------------------
16.07 接口测试的测试理论

01. 软件测试的基本问题有哪些?

01. 什么情况下需要考虑使用接口测试？
02. 在快速迭代开发的项目过程中如何落地接口测试？
03. 什么情况下不用做接口测试？
04. 接口测试的策略？ 具体的两类策略细节？
05. 判断一个问题是不是bug的依据有哪些?
06. 判断一个迭代的测试有没有通过的依据?
07. 如何对这个系统进行穷尽的测试?
08. 不能做穷尽的测试, 那么要测多少才够?
09. 接口测试测试用例的设计原则?
10. 接口测试测试用例的设计依据?
11. 设计接口测试用例的一般步骤?
12. 接口测试特有的测试场景?
---------------------------------------------------------------------------
16.10 接口测试框架设计
1. 描述一个自动化测试框架在单机上运行时的过程，并画图表示
2. 在上述图示中圈出测试框架
---------------------------------------------------------------------------
16.20 接口测试框架设计2
1. TUGithubAPI和TUGithubAPITest分别是用来做什么的，二者的关系请画图说明
2. 解释关键字和脚本的概念
---------------------------------------------------------------------------
16.30 项目开始前的准备
1. 解释master、release、integration、dev、hotfix、teach分支的含义
2. 本项目作为开源项目的管理模式
---------------------------------------------------------------------------
16.35 代码的下载和提交
1.
---------------------------------------------------------------------------
16.40 Rest请求客户端
1. 实现本项目中的 Rest 请求客户端
2. 说明 RestClient 类里出现的各种 HTTP 方法的含义和区别
3. 写一段脚本, 使用 RestClient 向 github.com 的首页发送 get 请求
---------------------------------------------------------------------------
16.50 通过接口登录Github
1. 在 rest_client 中添加登录方式信息
2. 封装查看所有repos的接口，接口地址：https://docs.github.com/en/rest/reference/repos#list-repositories-for-the-authenticated-user
3. 调用2中的接口查看结果
---------------------------------------------------------------------------
16.60 封装一个 Get 请求
1. 封装一个接口: 接口地址: https://docs.github.com/en/rest/reference/repos#list-repositories-for-the-authenticated-user
   封装要求：将参数封装在接口地址里，然后对这个接口进行单个参数的测试
2. 按照文档设计更多的输入参数, 对这个接口做测试, 尽可能多的覆盖各种输入组合以及正常和异常场景
---------------------------------------------------------------------------
16.70 进一步思考 Get 请求的封装请求的封装
1. 说明16.6 中的接口封装方式有什么问题，并改为通用的格式并调用
2. 这个项目中基础封装的原则
3. 按照基础封装的原则封装两个接口, 并调用它
文档地址: https://docs.github.com/en/rest/reference/repos#list-organization-repositories
https://docs.github.com/en/rest/reference/repos#list-public-repositories
---------------------------------------------------------------------------
16.80 封装更多类型的请求
1. 封装 repositories 中的其他接口
创建: https://docs.github.com/en/rest/reference/repos#create-a-repository-for-the-authenticated-user
获取: https://docs.github.com/en/rest/reference/repos#get-a-repository
编辑: https://docs.github.com/en/rest/reference/repos#update-a-repository
2. 调用这些接口验证功能
---------------------------------------------------------------------------
16.90 在项目实战中提交代码

---------------------------------------------------------------------------
16.100 TUGithubAPI 项目的介绍的补充
1. 给你一个网站接口项目要你测, 你怎么测?
2. 你的框架怎么设计, 有哪些模块?
3. 介绍一下你以前做过的项目里是怎么做这些模块的?
---------------------------------------------------------------------------
16.110 接口封装层设计的改进
1. 重写repos和github类，并封装repositories下的traffic接口 
   https://docs.github.com/en/rest/reference/repos#get-repository-clones
2. 调用traffic下的list_clones查询你自己名下的某个代码仓库在最近14天里每天的被clone次数。
---------------------------------------------------------------------------
16.120 关键字层的封装
1. 什么是关键字? 关键字有什么特点? 关键字和测试用例有什么关系?
2. 封装关键字 create_repo, 包含在当前用户下创建repo和在某个组织下创建repo两个接口
   并指出该关键字存放的路径
3. 为什么封装的关键字中没有把全部的参数都写上?
4. 要不要在关键字内部写断言语句, 为什么?
5. 调用2中的关键字,进行测试和断言, 分以下集中情况:
   1. test 1: 在当前用户下创建一个repo，除了repo名字以外全部用默认值
   2. test 2: 在当前用户下创建一个repo，使用一些输入值
   3. test 3: 创建一个名为testme的repo，并且不包含projects，不包含issues，也不包含wiki
   4. test 4: 使用重复的repo名字再次创建，并且在断言语句中预期它会调用失败
---------------------------------------------------------------------------
16.130 接口测试框架设计3-TUGithubAPITest 的介绍
1. 开发关键字由什么决定? 具体到 TUGithubAPI/TUGithubAPITest 这个项目呢?
2. TUGithubAPITest 内部包含哪些模块?
---------------------------------------------------------------------------
16.140 针对单个接口的测试
1. 怎样针对单个接口做测试?
2. 什么是软断言?
3. python 中的 assert 是软断言吗? 怎样实现软断言?
4. assert 后面的第二个参数表示什么?
5. 针对列出一个 github organization 中的 repo 这个接口做软断言测试, org名称TestUpCommunity
接口文档地址：https://docs.github.com/en/rest/reference/repos#list-organization-repositories
---------------------------------------------------------------------------
16.150 通过 fixture 做测试环境的切换
1. 添加 environment.py 文件并定义 Env 类， 这个类是用来做什么的？
2. 在 conftest.py 中定义 env 的 fixture
3. 为什么env设置为autouse但是测试用例里还是传了env？
4. 为什么 fixture 里的 print 语句不打印？
5. 如何修改环境变量？
---------------------------------------------------------------------------
16.160 给环境切换加上参数化
1. 修改 Github 和 Env 类, 使之适配参数化
2. 新建 data.ini 文件并修改 fixture env
---------------------------------------------------------------------------
16.170 响应结果的预处理
1. 改造 restclient 在其中加入对响应结果预处理的代码
2. 用改造后的 restclient 重新书写测试用例, 测试用例为 test_list_all_public_repos
3. 做预处理可以完全避免因exception而退出测试吗, 为什么?
---------------------------------------------------------------------------
16.180 针对场景的测试
1. 如何验证多个接口协同工作是否正常?
(如何进行业务场景测试/如何验证待测系统的多个组件之间的协同工作是否正常)
2. 添加一个新的关键字用来创建分支
相关接口:
https://docs.github.com/en/rest/reference/git#get-a-reference
https://docs.github.com/en/rest/reference/git#create-a-reference
3. 在 scenario_test 下新建测试用例, 要求是: 利用在2中新建的关键字来在当前用户下
创建一个名称随机的新代码仓库, 然后在这个代码仓库下创建一个名为 test 的分支.
---------------------------------------------------------------------------
16.190 如何在实际项目中应用测试框架
1. 应用这个框架做实际项目的步骤?
2. 拿到一个新项目时，怎样确认它的接口是基于什么协议的？
3. 最常见的接口鉴权方式是什么？
4. 以下是某电子商务项目的接口文档中鉴权说明：
------------------------------------------------------------
公共入参                                                    -
                                                           -
请求头需要设定几个固定入参，这些参数当用户处于登录状态下为必传项 -
                                                           -
参数示例                                                    -
Parameter       类型          描述               例子       -
userId          int          用户ID           20190001     -
sessionId       string     用户登陆凭证      13333332333    -
-------------------------------------------------------------
请参照以上说明写一个rest客户端的鉴权部分
5. 接口文档一般包含哪些内容？
6. 有以下接口文档
--------------------------------------------------------------
1.注册
接口地址：http://127.0.0.1/xxxx/user/v1/register
请求方式:POST
接口描述:用户注册，手机短信验证使用第三方短信平台，不包含在本平台中

@RequestBody入参
Parameter     类型       描述        例子
phone        string     手机号     13523332333
pwd          string      密码        123

接口出参
Parameter     类型        描述
status       string       状态
message      string     提示消息

出参例子
{
"message": "注册成功",
"status": "0000"
}

2.登陆
接口地址：http://127.0.0.1/xxxx/user/v1/login
请求方式:POST
接口描述:用户登录，已注册用户输入注册手机号与密码进行登录操作

@RequestBody入参
Parameter     类型       描述          例子
phone        string     手机号     13523332333
pwd          string      密码          123

接口出参 
Parameter     类型         描述
status       string       状态
message      string      提示消息
result      jsonObject   返回参数

result结构
Parameter     类型        描述
userId        int         用户ID
sessionId    string     用户登陆凭证
nickName     string       用户昵称
phone        string       用户手机号
headPic      string     用户头像地址
sex           int       性别，未提供修改性别的接口，返回默认1=男

出参例子
{
  "result":{
    "headPic": "http:// 127.0.0.1/xxxx/images/small/head_pic/2018-11-21/20181121100733.jpg",
    "nickName": "OP_8mY65",
    "phone": "16619958760",
    "sessionId": "154276714558512",
    "sex": 1,
    "userId": 12
  },
  "message": "登录成功",
  "status": "0000"
}

3. 修改昵称
接口地址：http://127.0.0.1/xxxx/user/verify/v1/modifyUserNick
请求方式:PUT
接口描述: 用户修改自己的昵称操作

@RequestHeader入参
Parameter      类型         描述          例子
userId         int         用户ID          18
sessionId     string     用户登陆凭证     15320748258726

@RequestBody入参
Parameter     类型       描述         例子
nickName     string     新昵称     好吃的鸡腿

接口出参
Parameter     类型        描述
status       string       状态
message      string     提示消息

出参例子
{
"message": "修改成功",
"status": "0000"
}

4. 修改用户密码
接口地址：http://127.0.0.1/xxxx/user/verify/v1/modifyUserPwd
请求方式:PUT
接口描述: 修改用户密码

@RequestHeader入参
Parameter       类型         描述             例子
userId          int         用户ID            18
sessionId      string     用户登陆凭证     1352333233313

@RequestBody入参
Parameter     类型        描述     例子
oldPwd       string     原密码     123
newPwd       string     新密码     456

接口出参
Parameter     类型        描述
status       string       状态
message      string     提示消息

出参例子
{
  "message": "修改成功",
  "status": "0000"
}
-------------------------------------------------------------
将以上接口封装为 Example 类
7. 为什么每个接口的参数都是 **kwargs, 而没有按照接口文档中去定义?
8. 构建调用 Example 类的方法, 并调用修改用户昵称的接口,并验证
9. 对应 Example 封装登录关键字 login_with_phone_and_pwd
10. 将9的关键字放入 conftest.py 中，并调用修改昵称测试用例来做演示
