14.9 requests 中的会话

1. cookie和session的定义？以及他们的区别
cookie 是 Web 服务器保存在用户浏览器上的小文本文件, 它可以包含用户的信息, 比如用户名、加密后的密码等信息.
当我们再次使用这个浏览器访问这个服务器时, 服务器可以直接读取这些信息, 而无需用户再次输入.
session 称为会话, 用户通常会在服务器提供的网页之间进行跳转来访问不同的页面, 服务器对一个用户创建一个 session 对象
存放在服务器端, 这样服务器就知道这个用户是谁了.
区别:
cookie 是存储在客户端, 不会被自动删除
session 是存储在服务端, 在服务端的文件或数据库中都可以
一般来说 session 的验证需要 cookie 带一个字段来表示这个用户是哪一个 session, 所以当客户端禁用 cookie 时, session 将失效.

2. 如果响应中含有cookies，如何读取？给出示例代码 url="http://example.com/some/cookie/setting/url", cookie的name是example_cookie_name
3. 如果想在请求中添加cookies，如何操作？ url=http://httpbin.org/cookies
4. 如何把RequestCookieJar 添加到请求中？ 给出示例代码 url=http://httpbin.org/cookies
5. 如何在requests中使用会话？给出示例代码？ 也就是如何证明session的功能？
   就是可以在不同请求中确认服务器记住了我们的cookie






16.07 接口测试的测试理论

1. 什么情况下需要考虑使用接口测试？
1）要快速验证功能的正确性并且需要反复迭代
2）要验证基于软件即服务的架构开发的项目

2. 在快速迭代开发的项目过程中如何落地接口测试？
1） 在软件的第一个迭代期内，通过手工测试快速确保这个迭代的功能。
    同时挤出时间对其中部分功能做接口测试自动化的脚本编写。
2） 在下个迭代中使用这些脚本做回归测试
3） 每个迭代都增加新的自动化脚本并维护原有的脚本，逐步形成一个完整的测试用例集。

3. 什么情况下不用做接口测试？
1） 当待测软件的主要功能均在客户端完成时，比如单机软件、单机游戏等。此时不涉及接口测试。
2） 当待测软件用到的服务均由第三方提供时，比如测试一些第三方气象软件。气象数据的服务往往由气象台发布。
    此时即使做了接口测试也是与待测软件无关的。

4. 接口测试的策略？ 具体的两类策略细节？
策略：使用编程语言编写接口测试框架加上脚本。
细节：对单个接口测试；多个接口串联成场景测试

5. 判断一个问题是不是bug的依据有哪些?
1) 接口文档
2) 根据测试依据的思维具体问题具体分析, 具体的原则有
    1) 分析问题对用户的严重程度
    2) 看有谁关心这个问题
    3) 有没有安全风险

6. 判断一个迭代的测试有没有通过的依据?
测试是为项目服务的,而不是反过来项目为测试服务. 所以测试人员通常不会说一个项目质量太差不能发布, 
而是把当前质量状态下发布会产生的风险提示给项目相关人员. 
具体风险可以是有多少严重程度为什么等级的bug, 有没有必须修复的严重问题仍未修复.
原则上讲, 如果有严重问题是不能发布的, 但如果拍板的经理或者整个团队都认为可以在这个风险下发布, 
那么一般还是会发布的. 此种情况下, 我们可以重新评估这个问题的严重程度, 看是不是可以降低一下. 
也就是说测试的依据并不是死板的, 而是随时根据项目实际情况可以调整的.
----
ps 这么写我觉得还是不知道迭代通过的依据是什么

07. 如何对这个系统进行穷尽的测试?
软件测试是不可穷尽的, 对同一个软件, 可以设计无数的测试; 显而易见, 接口测试也是不可穷尽的, 对
一个接口可能可以设计无数组传入参数, 所以测试是不可穷尽的.

08. 不能做穷尽的测试, 那么要测多少才够?
这个问的是测试完整性度量的问题, 不知道怎么回答.


09. 接口测试测试用例的设计原则?
黑盒与白盒相结合, 也就是灰盒的方法来设计测试用例.

10. 接口测试测试用例的设计依据?
1) 接口文档优先
2) 如果没有文档, 以抓包结果作为测试用例设计依据
通过阅读文档或抓包, 我们可以知道这个接口有哪些传入参数和返回参数. 但是对于参数的意义, 我们还是
需要结合业务以及与开发、产品人员沟通来做了解.

11. 设计接口测试用例的一般步骤?
1) 设计传入参数和预期的返回参数
2) 使用发包工具或脚本调用接口, 如果调不通, 需要去跟开发沟通
3) 如果调通了, 则作为一个接口调用的基础用例
4) 在基础用例上做扩充, 使用黑盒的等价类划分等方法设计传入参数. 形成单个接口的一组用例.
   有时候需要用到白盒的方法去阅读代码. 比如当我们需要对接口做数据库校验时, 需要读代码(或者问开发)
   才能知道要查数据库的哪个表
5) 在针对待测接口都设计好了基础用例的前提下, 组合各个接口, 来设计多个接口串联调用的场景测试用例
有的项目不需要做场景测试, 也有可能不需要做单个接口测试, 直接做场景测试, 这要根据实际项目来决定 

12. 接口测试特有的测试场景?
1. 接口测试的返回值可能有多种错误代码, 这些错误代码可以覆盖一下
2. 鉴权机制需要单独测试, 常见的鉴权机制有: 在请求头里包含token, 在请求头里的cookie里包含token
3. 在不通网络状况下测试,比如弱网环境下.


16.10 接口测试框架设计
1. 描述一个自动化测试框架在单机上运行时的过程
首先启动测试执行器，测试执行器调用测试套件（测试套件指测试用例的集合），然后按照测试用例中
描述的业务逻辑，使用测试驱动库（如selenium，requests等）去操作待测软件，并从待测软件中收集业务
逻辑的执行结果，将结果汇总后，生成测试报告。

2. 在上述图示中圈出测试框架
我们把测试驱动库，测试执行器以及测试套件们看做一个整体，称为测试框架


16.20 接口测试框架设计2
1. TUGithubAPI和TUGithubAPITest分别是用来做什么的，二者的关系请画图说明
TUGithubAPI是把Github提供的HTTP接口封装成Python类库
TUGithubAPITest是把测试用例集合到一起

2. 解释关键字和脚本的概念
关键字就是把待测软件提供的接口封装成python方法，这些python方法就是关键字
调用关键字组成测试用例，就是测试脚本


16.30 项目开始前的准备
1. 解释master、release、integration、dev、hotfix、teach分支的含义
master分支：主分支。我们将在主分支上做release，也就是发版本。
release分支：存放即将要发布到主分支的代码，进release分支的代码必须是经过测试且可用的。
integration分支：集成分支。项目成员提交的代码在集成分支进行集成。
dev分支：个人开发分支，项目成员个人可以创建并使用的分支。
hotfix分支：用来快速修复bug的分支。
teach分支：本项目特有的教学分支，在项目第一阶段中，每一小节的教程代码都会创建一个教学分支，方便
大家直接下载源代码进行学习。这些分支的代码基本在创建完毕后就固定下来了。

2. 本项目作为开源项目的管理模式
本项目中，项目成员需要 fork 我们的主项目到自己的个人账号下的仓库中，从integration 分支拉出dev 
分支，再通过发起 pull request 来把自己开发的代码提交到主代码仓库的 integration分支。