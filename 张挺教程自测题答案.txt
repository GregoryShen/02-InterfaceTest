16.07 接口测试的测试理论

1. 什么情况下需要考虑使用接口测试？
1）要快速验证功能的正确性并且需要反复迭代
2）要验证基于软件即服务的架构开发的项目

2. 在快速迭代开发的项目过程中如何落地接口测试？
1） 在软件的第一个迭代期内，通过手工测试快速确保这个迭代的功能。
    同时挤出时间对其中部分功能做接口测试自动化的脚本编写。
2） 在下个迭代中使用这些脚本做回归测试
3） 每个迭代都增加新的自动化脚本并维护原有的脚本，逐步形成一个完整的测试用例集。

3. 什么情况下不用做接口测试？
1） 当待测软件的主要功能均在客户端完成时，比如单机软件、单机游戏等。此时不涉及接口测试。
2） 当待测软件用到的服务均由第三方提供时，比如测试一些第三方气象软件。气象数据的服务往往由气象台发布。此时即使做了接口测试也是与待测软件无关的。

4. 接口测试的策略？ 具体的两类策略细节？
策略：使用编程语言编写接口测试框架加上脚本。
细节：对单个接口测试；多个接口串联成场景测试

5. 判断一个问题是不是bug的依据有哪些?
1) 接口文档
2) 根据测试依据的思维具体问题具体分析, 具体的原则有
    1) 分析问题对用户的严重程度
    2) 看有谁关心这个问题
    3) 看有没有安全风险

6. 判断一个迭代的测试有没有通过的依据?
测试是为项目服务的,而不是反过来项目为测试服务. 所以测试人员通常不会说一个项目质量太差不能发布, 
而是把当前质量状态下发布会产生的风险提示给项目相关人员. 
具体风险可以是有多少严重程度为什么等级的bug, 有没有必须修复的严重问题仍未修复.
原则上讲, 如果有严重问题是不能发布的, 但如果拍板的经理或者整个团队都认为可以在这个风险下发布, 
那么一般还是会发布的. 此种情况下, 我们可以重新评估这个问题的严重程度, 看是不是可以降低一下. 
也就是说测试的依据并不是死板的, 而是随时根据项目实际情况可以调整的.
----
ps 这么写我觉得还是不知道迭代通过的依据是什么

7. 接口测试设计测试用例的原则?
黑盒与白盒相结合, 也就是灰盒的方法来设计测试用例.

8. 接口测试的测试用例设计依据?
1) 接口文档优先
2) 如果没有文档, 以抓包结果作为测试用例设计依据
通过阅读文档或抓包, 我们可以知道这个接口有哪些传入参数和返回参数. 但是对于参数的意义, 我们还是
需要结合业务以及与开发、产品人员沟通来做了解.

9. 设计接口测试用例的一般步骤?
1) 设计传入参数和预期的返回参数
2) 使用发包工具或脚本调用接口, 如果调不通, 需要去跟开发沟通
3) 如果调通了, 则作为一个接口调用的基础用例
4) 在基础用例上做扩充, 使用黑盒的等价类划分等方法设计传入参数. 形成单个接口的一组用例.
   有时候需要用到白盒的方法去阅读代码. 比如当我们需要对接口做数据库校验时, 需要读代码(或者问开发)
   才能知道要查数据库的哪个表
5) 在针对待测接口都设计好了基础用例的前提下, 组合各个接口, 来设计多个接口串联调用的场景测试用例
有的项目不需要做场景测试, 也有可能不需要做单个接口测试, 直接做场景测试, 也即是345不是都要做

10. 接口测试特有的测试场景?
1. 接口测试的返回值可能有多种错误代码, 这些错误代码可以覆盖一下
2. 鉴权机制需要单独测试, 常见的鉴权机制有: 在请求头里包含token, 在请求头里的cookie里包含token
3. 在不通网络状况下测试,比如弱网环境下.